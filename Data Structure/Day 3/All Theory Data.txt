Introduction:
- What is data structure & its classification?

- What is an algorithm ?

Array:
- Searching Algorithms: Linear Search & Binary Search
- Sorting Algorithms:
- Selection Sort, Bubble Sort & Insertion Sort: Algorithms & Implementation.
- Merge Sort & Quick Sort: Only Algorithms.
- Limitations of an Array data structure.

Linked List:
- Concept & Definition
- Implementation of Singly Linear Linked List Operations: Addition & Deletion.
- Concepts:
- Singly Circular Linked List
- Doubly Linear Linked List
- Doubly Circular Linked List.
- Difference between Array and Linked List.

Stack
- Concept & Definition
- Implementation of Stack by using an array
+ Stack Application Algorithms:
- Conversion of infix expression into its equivalent postfix 
expression.
- Conversion of infix expression into its equivalent prefix expression.
-Conversion of prefix expression into its equivalent postfix 
expression.
- Evaluation of postfix expression


# Queue:
- Concept & Definition
- Types of Queue
- Implementation of Linear Queue & Circular Queue

Non-Linear Data Structure:-

Tree terminologies 

Graph terminologies


Data Structure :-

     Array :-            int arr[4] = {1,2,3,4}  //  4 bytes
                         int arr[100] = {1,2,3,4,5,............100} // 100 bytes

   Array 
   Structure
   Stack
   Queue

Array :-   an array is linear Data Structure which is collection of logically related similar type 
           data elements get stored into the memeory at contiguos location.
             
           int arr[100] = {1,2,3,4,5,6,77,........100}   
           
           addition and deletion non - efficient
           searching  // element
           sorting   // descending or ascending
           traversal  

          

Strucutre :- It is data structure which is a collection of logically related similar and disimmilar type of 
             data elements gets stored into the memeory collectively as a single entity / record.
 
- we want to store recoords of 100 employees

           empid : int
           name  : string / char[]
           salary: float / double


struct employee
{
    int empid;   // 4 bytes 
    char name[16]; // 16 bytes 
    float salary;  // 4 bytes

}// 24 bytes

1. Primitive data type     : - char, int , float, double, void, //compiler konwn
2. Non-primitive data type : - pointer , array , structure , union , enum , function .....etc // data type which are not already known to compiler

typdef

typdef int INT ; // user defined // non derived type
typdef struct employee emp_d; // derived // user defiend
int *iptr ; // derived data type

1. Linear / basic data structure :- data stucture in which data elements gets stored into the momory in a 
                                    linear manner so hence can be accessed linearly (i.e. one after another).

   - array
   - strucutre & union
   - stack 
   - queue

2. non-linear data structure :- hierarchical manner
   
   - Tree
   - Graph
   - Binary heap
   - Hash table.............etc



          program => machine

          int main (){

                     pintf("Hello IACSD");
                     return 0;               
                  }
     
         Algorithms = > Human-being  // it is set of instructions wrriten by human understanable language , it follows
                                        accomplish given task.
                                     // program is implementation of algorithms
                                     // An algorithm is like blue print / desin of a program on paper.
          Blue print ==> implementation = > building
          
     Addition of 2 number

         step 1 : declare the 3 number .
         step 2 : input 2 number.
         step 3 : perform addition and store inside the 3rd number.
         step 4 : print the result.    


       Pseudocode =>  special form of algorithm (programmer user)
 
Pseudo code ==>  Human
        Algorithm ArraySum(arr, size){ //arr is array
         
         sum = 0;
    
         for(i=1; i <= size; i++){
                       sum = sum + arr[i]; // sum+=arr[i]
              }
           return sum;

Program ==> Machine

     int array_sum(int arr[], int size){
          int sum = 0;
          int i;
          for(i=0 ; i<size; i++){
                  sum =sum + arr[i];
          }
           return sum;
    }

algorithm : - 
 step 1 :- intially take sum as 0;
 step 2 :- traverse an array and add each array elements sequentially into the sum.
 step 3 :- return final sum.
  

  int arr[4] = {1,2,3,4}  //  4 bytes 
  // linear search
  // Binary search  

Time complexity :- amount of time to need to completation.
Space Complexity :- amount of space it need to completion.



- Searching Algorithms:-
 
1. Linear Search :- unsorted or sort

                        

2. Binary Search :- Array sort manner
                    Divide and conquer approch time complexity in terms of log n

   mid = (left + right) / 2
 left subarray => value of left remains as it is , right = mid-1
 right subarray => value of right remains as it is , left= mid+1

space compexity            16- bit compiler     32 - bit compiler
                           int - 2 bytes        int 4 bytes

if size of an array = 10   20 bytes             40 bytes     

 

Searching Algorithms

                     Best case        worst case         Avg case  
  linear search        Ω(1)                O(n)	            Ꝋ(n)

  Binary search        Ω(1)                O(log n)	    Ꝋ(log n)

- when we need to decide efficient btween two algorithm to consider avg case compexities

O(1) < O(log n) < O (n) < O(n log n ) < O(n2)



- Sorting Algorithms:
1. Selection Sort :-
  (n-1) + (n-2) + (n-3) + .....
total no of comparisons n(n-1)/2 ==> (n2 - n )/2
                                 ==> n2
             *** best case , worst case and  avg case time compexity  = O(n2)
                  Ω(n2)          O(n2)        Ꝋ(n2)


2. Bubble Sort :-   

                      Best case        worst case         Avg case  
                          Ω(n)             O(n2)            Ꝋ(n2)


3. Quick Sort :-
                  this is follows divide and conquer approch
                  this basic logic of this algorithm is partitioning
step 1 : - select pivot element left most part or right most part 
step 2 : -    
















4. Insertion Sort :-  


if array's already sorted :- iteration 1 and 1 comapare  ==> 1 * (n-1)  => O(n)

   for( i=1 ; i < SIZE ; i++){
      j= i-1;
      key = arr[i];

      while( j >= 0 && key < arr[j]){
           arr[j+1] = arr[j];
           j--;
      }

      arr[j+1] = key;
   }










5. Merge Sort :-  we need extra space  ==> Dynamically allocation of memory.
        This algorithm follows divide and conquer approch
        
step 1 :- Divide big size of array into smallest size subarray having size 1.

    for left subarray , value of left remains same and right = mid.
    for right subarray , value of right remains same and left = mid + 1 .

sep 2 :- merge two already sorted subarray's into a single array in  sorted manner.

                 Best case        worst case         Avg case  
                 Ω(n log n)        O(n log n)         Ꝋ(n log n)

                   
                 O(1) < O(log n) < O (n) < O(n log n ) < O(n2)


Sorting Algo's :-			Best Case	Worst Case	Avg Case							
	Selection Sort			 Ω(n2)		O(n2)		 Ꝋ(n2)							
	Bubble Sort			 Ω(n)		O(n2)		 Ꝋ(n2)							
	Insertion Sort			 Ω(n)		O(n2)		 Ꝋ(n2)					  		
	Merge Sort			 Ω(n log n)	O(n log n)	 Ꝋ(n log n)		Extra Space					
	Quick Sort			 Ω(n log n)	O(n2)	         Ꝋ(n log n)		do not takes extra space					


Searching Algorithms :-

                     Best case        worst case         Avg case  
  linear search        Ω(1)                O(n)	            Ꝋ(n)

  Binary search        Ω(1)                O(log n)	    Ꝋ(log n)

 ** Limitations of an Array data structure :-
 
1. Array is static i.e. size of array remains fixed. cannot be grow and shrink during runtime.
2. Addition and deletion operations on array are not efficient as it takes O(n) time.
3. Collection of logically similar data elements ==> overcome limitation structure has been designed.






                                       Linked List 
 
                                              1. Functions (call by address / value).
                                              2. FAR (function ativation record).
                                              3. Pointer fundametals.
                                              4. Dynamic memmory Allocation (malloc , calloc and realloc).
                                              5. Self Referential Structure.



























